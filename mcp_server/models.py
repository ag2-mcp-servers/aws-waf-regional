# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:12:51+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class Action(RootModel[str]):
    root: str


class AssociateWebACLResponse(BaseModel):
    pass


class ByteMatchTargetString(RootModel[str]):
    root: str


class ChangeAction(Enum):
    INSERT = 'INSERT'
    DELETE = 'DELETE'


class ChangeToken(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class ChangeTokenStatus(Enum):
    PROVISIONED = 'PROVISIONED'
    PENDING = 'PENDING'
    INSYNC = 'INSYNC'


class ComparisonOperator(Enum):
    EQ = 'EQ'
    NE = 'NE'
    LE = 'LE'
    LT = 'LT'
    GE = 'GE'
    GT = 'GT'


class Country(RootModel[str]):
    root: str


class DeleteByteMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteGeoMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteIPSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteLoggingConfigurationResponse(BaseModel):
    pass


class DeletePermissionPolicyResponse(BaseModel):
    pass


class DeleteRateBasedRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteRegexMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteRegexPatternSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteRuleGroupResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteSizeConstraintSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteSqlInjectionMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteWebACLResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DeleteXssMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class DisassociateWebACLResponse(BaseModel):
    pass


class GeoMatchConstraintType(Enum):
    Country = 'Country'


class GeoMatchConstraintValue(Enum):
    AF = 'AF'
    AX = 'AX'
    AL = 'AL'
    DZ = 'DZ'
    AS = 'AS'
    AD = 'AD'
    AO = 'AO'
    AI = 'AI'
    AQ = 'AQ'
    AG = 'AG'
    AR = 'AR'
    AM = 'AM'
    AW = 'AW'
    AU = 'AU'
    AT = 'AT'
    AZ = 'AZ'
    BS = 'BS'
    BH = 'BH'
    BD = 'BD'
    BB = 'BB'
    BY = 'BY'
    BE = 'BE'
    BZ = 'BZ'
    BJ = 'BJ'
    BM = 'BM'
    BT = 'BT'
    BO = 'BO'
    BQ = 'BQ'
    BA = 'BA'
    BW = 'BW'
    BV = 'BV'
    BR = 'BR'
    IO = 'IO'
    BN = 'BN'
    BG = 'BG'
    BF = 'BF'
    BI = 'BI'
    KH = 'KH'
    CM = 'CM'
    CA = 'CA'
    CV = 'CV'
    KY = 'KY'
    CF = 'CF'
    TD = 'TD'
    CL = 'CL'
    CN = 'CN'
    CX = 'CX'
    CC = 'CC'
    CO = 'CO'
    KM = 'KM'
    CG = 'CG'
    CD = 'CD'
    CK = 'CK'
    CR = 'CR'
    CI = 'CI'
    HR = 'HR'
    CU = 'CU'
    CW = 'CW'
    CY = 'CY'
    CZ = 'CZ'
    DK = 'DK'
    DJ = 'DJ'
    DM = 'DM'
    DO = 'DO'
    EC = 'EC'
    EG = 'EG'
    SV = 'SV'
    GQ = 'GQ'
    ER = 'ER'
    EE = 'EE'
    ET = 'ET'
    FK = 'FK'
    FO = 'FO'
    FJ = 'FJ'
    FI = 'FI'
    FR = 'FR'
    GF = 'GF'
    PF = 'PF'
    TF = 'TF'
    GA = 'GA'
    GM = 'GM'
    GE = 'GE'
    DE = 'DE'
    GH = 'GH'
    GI = 'GI'
    GR = 'GR'
    GL = 'GL'
    GD = 'GD'
    GP = 'GP'
    GU = 'GU'
    GT = 'GT'
    GG = 'GG'
    GN = 'GN'
    GW = 'GW'
    GY = 'GY'
    HT = 'HT'
    HM = 'HM'
    VA = 'VA'
    HN = 'HN'
    HK = 'HK'
    HU = 'HU'
    IS = 'IS'
    IN = 'IN'
    ID = 'ID'
    IR = 'IR'
    IQ = 'IQ'
    IE = 'IE'
    IM = 'IM'
    IL = 'IL'
    IT = 'IT'
    JM = 'JM'
    JP = 'JP'
    JE = 'JE'
    JO = 'JO'
    KZ = 'KZ'
    KE = 'KE'
    KI = 'KI'
    KP = 'KP'
    KR = 'KR'
    KW = 'KW'
    KG = 'KG'
    LA = 'LA'
    LV = 'LV'
    LB = 'LB'
    LS = 'LS'
    LR = 'LR'
    LY = 'LY'
    LI = 'LI'
    LT = 'LT'
    LU = 'LU'
    MO = 'MO'
    MK = 'MK'
    MG = 'MG'
    MW = 'MW'
    MY = 'MY'
    MV = 'MV'
    ML = 'ML'
    MT = 'MT'
    MH = 'MH'
    MQ = 'MQ'
    MR = 'MR'
    MU = 'MU'
    YT = 'YT'
    MX = 'MX'
    FM = 'FM'
    MD = 'MD'
    MC = 'MC'
    MN = 'MN'
    ME = 'ME'
    MS = 'MS'
    MA = 'MA'
    MZ = 'MZ'
    MM = 'MM'
    NA = 'NA'
    NR = 'NR'
    NP = 'NP'
    NL = 'NL'
    NC = 'NC'
    NZ = 'NZ'
    NI = 'NI'
    NE = 'NE'
    NG = 'NG'
    NU = 'NU'
    NF = 'NF'
    MP = 'MP'
    NO = 'NO'
    OM = 'OM'
    PK = 'PK'
    PW = 'PW'
    PS = 'PS'
    PA = 'PA'
    PG = 'PG'
    PY = 'PY'
    PE = 'PE'
    PH = 'PH'
    PN = 'PN'
    PL = 'PL'
    PT = 'PT'
    PR = 'PR'
    QA = 'QA'
    RE = 'RE'
    RO = 'RO'
    RU = 'RU'
    RW = 'RW'
    BL = 'BL'
    SH = 'SH'
    KN = 'KN'
    LC = 'LC'
    MF = 'MF'
    PM = 'PM'
    VC = 'VC'
    WS = 'WS'
    SM = 'SM'
    ST = 'ST'
    SA = 'SA'
    SN = 'SN'
    RS = 'RS'
    SC = 'SC'
    SL = 'SL'
    SG = 'SG'
    SX = 'SX'
    SK = 'SK'
    SI = 'SI'
    SB = 'SB'
    SO = 'SO'
    ZA = 'ZA'
    GS = 'GS'
    SS = 'SS'
    ES = 'ES'
    LK = 'LK'
    SD = 'SD'
    SR = 'SR'
    SJ = 'SJ'
    SZ = 'SZ'
    SE = 'SE'
    CH = 'CH'
    SY = 'SY'
    TW = 'TW'
    TJ = 'TJ'
    TZ = 'TZ'
    TH = 'TH'
    TL = 'TL'
    TG = 'TG'
    TK = 'TK'
    TO = 'TO'
    TT = 'TT'
    TN = 'TN'
    TR = 'TR'
    TM = 'TM'
    TC = 'TC'
    TV = 'TV'
    UG = 'UG'
    UA = 'UA'
    AE = 'AE'
    GB = 'GB'
    US = 'US'
    UM = 'UM'
    UY = 'UY'
    UZ = 'UZ'
    VU = 'VU'
    VE = 'VE'
    VN = 'VN'
    VG = 'VG'
    VI = 'VI'
    WF = 'WF'
    EH = 'EH'
    YE = 'YE'
    ZM = 'ZM'
    ZW = 'ZW'


class GetChangeTokenRequest(BaseModel):
    pass


class GetChangeTokenResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class GetChangeTokenStatusRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')


class GetChangeTokenStatusResponse(BaseModel):
    ChangeTokenStatus_1: Optional[ChangeTokenStatus] = Field(
        None, alias='ChangeTokenStatus'
    )


class GetSampledRequestsMaxItems(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class HTTPMethod(RootModel[str]):
    root: str


class HTTPVersion(RootModel[str]):
    root: str


class HeaderName(RootModel[str]):
    root: str


class HeaderValue(RootModel[str]):
    root: str


class IPSetDescriptorType(Enum):
    IPV4 = 'IPV4'
    IPV6 = 'IPV6'


class IPSetDescriptorValue(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=50)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=50)


class IPString(RootModel[str]):
    root: str


class IgnoreUnsupportedType(RootModel[bool]):
    root: bool


class ManagedKey(RootModel[str]):
    root: str


class ManagedKeys(RootModel[List[ManagedKey]]):
    root: List[ManagedKey]


class MatchFieldData(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class MatchFieldType(Enum):
    URI = 'URI'
    QUERY_STRING = 'QUERY_STRING'
    HEADER = 'HEADER'
    METHOD = 'METHOD'
    BODY = 'BODY'
    SINGLE_QUERY_ARG = 'SINGLE_QUERY_ARG'
    ALL_QUERY_ARGS = 'ALL_QUERY_ARGS'


class MetricName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class Negated(RootModel[bool]):
    root: bool


class NextMarker(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1224)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1224)


class PaginationLimit(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PolicyString(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=395000)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=395000)


class PopulationSize(RootModel[int]):
    root: int


class PositionalConstraint(Enum):
    EXACTLY = 'EXACTLY'
    STARTS_WITH = 'STARTS_WITH'
    ENDS_WITH = 'ENDS_WITH'
    CONTAINS = 'CONTAINS'
    CONTAINS_WORD = 'CONTAINS_WORD'


class PredicateType(Enum):
    IPMatch = 'IPMatch'
    ByteMatch = 'ByteMatch'
    SqlInjectionMatch = 'SqlInjectionMatch'
    GeoMatch = 'GeoMatch'
    SizeConstraint = 'SizeConstraint'
    XssMatch = 'XssMatch'
    RegexMatch = 'RegexMatch'


class PutPermissionPolicyResponse(BaseModel):
    pass


class RateKey(Enum):
    IP = 'IP'


class RateLimit(RootModel[conint(ge=100, le=2000000000)]):
    root: conint(ge=100, le=2000000000)


class RegexPatternString(
    RootModel[constr(pattern=r'.*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'.*', min_length=1, max_length=512)


class RegexPatternStrings(RootModel[List[RegexPatternString]]):
    root: List[RegexPatternString] = Field(..., max_length=10)


class ResourceArn(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=1224)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=1224)


class ResourceArns(RootModel[List[ResourceArn]]):
    root: List[ResourceArn]


class ResourceId(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class ResourceName(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class ResourceType(Enum):
    APPLICATION_LOAD_BALANCER = 'APPLICATION_LOAD_BALANCER'
    API_GATEWAY = 'API_GATEWAY'


class RuleGroup(BaseModel):
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Name: Optional[ResourceName] = None
    RuleGroupId: ResourceId


class RuleGroupSummary(BaseModel):
    Name: ResourceName
    RuleGroupId: ResourceId


class RulePriority(RootModel[int]):
    root: int


class RuleSummary(BaseModel):
    Name: ResourceName
    RuleId: ResourceId


class S3BucketName(
    RootModel[
        constr(
            pattern=r'^aws-waf-migration-[0-9A-Za-z\.\-_]*', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'^aws-waf-migration-[0-9A-Za-z\.\-_]*', min_length=3, max_length=63
    )


class S3ObjectUrl(RootModel[constr(min_length=1)]):
    root: constr(min_length=1)


class SampleWeight(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Size(RootModel[conint(ge=0, le=21474836480)]):
    root: conint(ge=0, le=21474836480)


class SizeConstraintSetSummary(BaseModel):
    Name: ResourceName
    SizeConstraintSetId: ResourceId


class SqlInjectionMatchSetSummary(BaseModel):
    Name: ResourceName
    SqlInjectionMatchSetId: ResourceId


class SubscribedRuleGroupSummary(BaseModel):
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: ResourceName
    RuleGroupId: ResourceId


class TagKey(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=128)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'.*', min_length=0, max_length=256)]):
    root: constr(pattern=r'.*', min_length=0, max_length=256)


class TextTransformation(Enum):
    NONE = 'NONE'
    COMPRESS_WHITE_SPACE = 'COMPRESS_WHITE_SPACE'
    HTML_ENTITY_DECODE = 'HTML_ENTITY_DECODE'
    LOWERCASE = 'LOWERCASE'
    CMD_LINE = 'CMD_LINE'
    URL_DECODE = 'URL_DECODE'


class Timestamp(RootModel[datetime]):
    root: datetime


class URIString(RootModel[str]):
    root: str


class UntagResourceRequest(BaseModel):
    ResourceARN: ResourceArn
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateByteMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateGeoMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateIPSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateRateBasedRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateRegexMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateRegexPatternSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateRuleGroupResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateSizeConstraintSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateSqlInjectionMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateWebACLResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class UpdateXssMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class WAFBadRequestException(RootModel[Any]):
    root: Any


class WAFDisallowedNameException(RootModel[Any]):
    root: Any


class WAFEntityMigrationException(RootModel[Any]):
    root: Any


class WAFInternalErrorException(RootModel[Any]):
    root: Any


class WAFInvalidAccountException(RootModel[Any]):
    root: Any


class WAFInvalidOperationException(RootModel[Any]):
    root: Any


class WAFInvalidParameterException(RootModel[Any]):
    root: Any


class WAFInvalidPermissionPolicyException(RootModel[Any]):
    root: Any


class WAFInvalidRegexPatternException(RootModel[Any]):
    root: Any


class WAFLimitsExceededException(RootModel[Any]):
    root: Any


class WAFNonEmptyEntityException(RootModel[Any]):
    root: Any


class WAFNonexistentContainerException(RootModel[Any]):
    root: Any


class WAFNonexistentItemException(RootModel[Any]):
    root: Any


class WAFReferencedItemException(RootModel[Any]):
    root: Any


class WAFServiceLinkedRoleErrorException(RootModel[Any]):
    root: Any


class WAFStaleDataException(RootModel[Any]):
    root: Any


class WAFSubscriptionNotFoundException(RootModel[Any]):
    root: Any


class WAFTagOperationException(RootModel[Any]):
    root: Any


class WAFTagOperationInternalErrorException(RootModel[Any]):
    root: Any


class WAFUnavailableEntityException(RootModel[Any]):
    root: Any


class WafActionType(Enum):
    BLOCK = 'BLOCK'
    ALLOW = 'ALLOW'
    COUNT = 'COUNT'


class WafOverrideActionType(Enum):
    NONE = 'NONE'
    COUNT = 'COUNT'


class WafRuleType(Enum):
    REGULAR = 'REGULAR'
    RATE_BASED = 'RATE_BASED'
    GROUP = 'GROUP'


class WebACLSummary(BaseModel):
    Name: ResourceName
    WebACLId: ResourceId


class XssMatchSetSummary(BaseModel):
    Name: ResourceName
    XssMatchSetId: ResourceId


class XAmzTarget(Enum):
    AWSWAF_Regional_20161128_AssociateWebACL = (
        'AWSWAF_Regional_20161128.AssociateWebACL'
    )


class XAmzTarget1(Enum):
    AWSWAF_Regional_20161128_CreateByteMatchSet = (
        'AWSWAF_Regional_20161128.CreateByteMatchSet'
    )


class XAmzTarget2(Enum):
    AWSWAF_Regional_20161128_CreateGeoMatchSet = (
        'AWSWAF_Regional_20161128.CreateGeoMatchSet'
    )


class XAmzTarget3(Enum):
    AWSWAF_Regional_20161128_CreateIPSet = 'AWSWAF_Regional_20161128.CreateIPSet'


class XAmzTarget4(Enum):
    AWSWAF_Regional_20161128_CreateRateBasedRule = (
        'AWSWAF_Regional_20161128.CreateRateBasedRule'
    )


class XAmzTarget5(Enum):
    AWSWAF_Regional_20161128_CreateRegexMatchSet = (
        'AWSWAF_Regional_20161128.CreateRegexMatchSet'
    )


class XAmzTarget6(Enum):
    AWSWAF_Regional_20161128_CreateRegexPatternSet = (
        'AWSWAF_Regional_20161128.CreateRegexPatternSet'
    )


class XAmzTarget7(Enum):
    AWSWAF_Regional_20161128_CreateRule = 'AWSWAF_Regional_20161128.CreateRule'


class XAmzTarget8(Enum):
    AWSWAF_Regional_20161128_CreateRuleGroup = (
        'AWSWAF_Regional_20161128.CreateRuleGroup'
    )


class XAmzTarget9(Enum):
    AWSWAF_Regional_20161128_CreateSizeConstraintSet = (
        'AWSWAF_Regional_20161128.CreateSizeConstraintSet'
    )


class XAmzTarget10(Enum):
    AWSWAF_Regional_20161128_CreateSqlInjectionMatchSet = (
        'AWSWAF_Regional_20161128.CreateSqlInjectionMatchSet'
    )


class XAmzTarget11(Enum):
    AWSWAF_Regional_20161128_CreateWebACL = 'AWSWAF_Regional_20161128.CreateWebACL'


class XAmzTarget12(Enum):
    AWSWAF_Regional_20161128_CreateWebACLMigrationStack = (
        'AWSWAF_Regional_20161128.CreateWebACLMigrationStack'
    )


class XAmzTarget13(Enum):
    AWSWAF_Regional_20161128_CreateXssMatchSet = (
        'AWSWAF_Regional_20161128.CreateXssMatchSet'
    )


class XAmzTarget14(Enum):
    AWSWAF_Regional_20161128_DeleteByteMatchSet = (
        'AWSWAF_Regional_20161128.DeleteByteMatchSet'
    )


class XAmzTarget15(Enum):
    AWSWAF_Regional_20161128_DeleteGeoMatchSet = (
        'AWSWAF_Regional_20161128.DeleteGeoMatchSet'
    )


class XAmzTarget16(Enum):
    AWSWAF_Regional_20161128_DeleteIPSet = 'AWSWAF_Regional_20161128.DeleteIPSet'


class XAmzTarget17(Enum):
    AWSWAF_Regional_20161128_DeleteLoggingConfiguration = (
        'AWSWAF_Regional_20161128.DeleteLoggingConfiguration'
    )


class XAmzTarget18(Enum):
    AWSWAF_Regional_20161128_DeletePermissionPolicy = (
        'AWSWAF_Regional_20161128.DeletePermissionPolicy'
    )


class XAmzTarget19(Enum):
    AWSWAF_Regional_20161128_DeleteRateBasedRule = (
        'AWSWAF_Regional_20161128.DeleteRateBasedRule'
    )


class XAmzTarget20(Enum):
    AWSWAF_Regional_20161128_DeleteRegexMatchSet = (
        'AWSWAF_Regional_20161128.DeleteRegexMatchSet'
    )


class XAmzTarget21(Enum):
    AWSWAF_Regional_20161128_DeleteRegexPatternSet = (
        'AWSWAF_Regional_20161128.DeleteRegexPatternSet'
    )


class XAmzTarget22(Enum):
    AWSWAF_Regional_20161128_DeleteRule = 'AWSWAF_Regional_20161128.DeleteRule'


class XAmzTarget23(Enum):
    AWSWAF_Regional_20161128_DeleteRuleGroup = (
        'AWSWAF_Regional_20161128.DeleteRuleGroup'
    )


class XAmzTarget24(Enum):
    AWSWAF_Regional_20161128_DeleteSizeConstraintSet = (
        'AWSWAF_Regional_20161128.DeleteSizeConstraintSet'
    )


class XAmzTarget25(Enum):
    AWSWAF_Regional_20161128_DeleteSqlInjectionMatchSet = (
        'AWSWAF_Regional_20161128.DeleteSqlInjectionMatchSet'
    )


class XAmzTarget26(Enum):
    AWSWAF_Regional_20161128_DeleteWebACL = 'AWSWAF_Regional_20161128.DeleteWebACL'


class XAmzTarget27(Enum):
    AWSWAF_Regional_20161128_DeleteXssMatchSet = (
        'AWSWAF_Regional_20161128.DeleteXssMatchSet'
    )


class XAmzTarget28(Enum):
    AWSWAF_Regional_20161128_DisassociateWebACL = (
        'AWSWAF_Regional_20161128.DisassociateWebACL'
    )


class XAmzTarget29(Enum):
    AWSWAF_Regional_20161128_GetByteMatchSet = (
        'AWSWAF_Regional_20161128.GetByteMatchSet'
    )


class XAmzTarget30(Enum):
    AWSWAF_Regional_20161128_GetChangeToken = 'AWSWAF_Regional_20161128.GetChangeToken'


class XAmzTarget31(Enum):
    AWSWAF_Regional_20161128_GetChangeTokenStatus = (
        'AWSWAF_Regional_20161128.GetChangeTokenStatus'
    )


class XAmzTarget32(Enum):
    AWSWAF_Regional_20161128_GetGeoMatchSet = 'AWSWAF_Regional_20161128.GetGeoMatchSet'


class XAmzTarget33(Enum):
    AWSWAF_Regional_20161128_GetIPSet = 'AWSWAF_Regional_20161128.GetIPSet'


class XAmzTarget34(Enum):
    AWSWAF_Regional_20161128_GetLoggingConfiguration = (
        'AWSWAF_Regional_20161128.GetLoggingConfiguration'
    )


class XAmzTarget35(Enum):
    AWSWAF_Regional_20161128_GetPermissionPolicy = (
        'AWSWAF_Regional_20161128.GetPermissionPolicy'
    )


class XAmzTarget36(Enum):
    AWSWAF_Regional_20161128_GetRateBasedRule = (
        'AWSWAF_Regional_20161128.GetRateBasedRule'
    )


class XAmzTarget37(Enum):
    AWSWAF_Regional_20161128_GetRateBasedRuleManagedKeys = (
        'AWSWAF_Regional_20161128.GetRateBasedRuleManagedKeys'
    )


class XAmzTarget38(Enum):
    AWSWAF_Regional_20161128_GetRegexMatchSet = (
        'AWSWAF_Regional_20161128.GetRegexMatchSet'
    )


class XAmzTarget39(Enum):
    AWSWAF_Regional_20161128_GetRegexPatternSet = (
        'AWSWAF_Regional_20161128.GetRegexPatternSet'
    )


class XAmzTarget40(Enum):
    AWSWAF_Regional_20161128_GetRule = 'AWSWAF_Regional_20161128.GetRule'


class XAmzTarget41(Enum):
    AWSWAF_Regional_20161128_GetRuleGroup = 'AWSWAF_Regional_20161128.GetRuleGroup'


class XAmzTarget42(Enum):
    AWSWAF_Regional_20161128_GetSampledRequests = (
        'AWSWAF_Regional_20161128.GetSampledRequests'
    )


class XAmzTarget43(Enum):
    AWSWAF_Regional_20161128_GetSizeConstraintSet = (
        'AWSWAF_Regional_20161128.GetSizeConstraintSet'
    )


class XAmzTarget44(Enum):
    AWSWAF_Regional_20161128_GetSqlInjectionMatchSet = (
        'AWSWAF_Regional_20161128.GetSqlInjectionMatchSet'
    )


class XAmzTarget45(Enum):
    AWSWAF_Regional_20161128_GetWebACL = 'AWSWAF_Regional_20161128.GetWebACL'


class XAmzTarget46(Enum):
    AWSWAF_Regional_20161128_GetWebACLForResource = (
        'AWSWAF_Regional_20161128.GetWebACLForResource'
    )


class XAmzTarget47(Enum):
    AWSWAF_Regional_20161128_GetXssMatchSet = 'AWSWAF_Regional_20161128.GetXssMatchSet'


class XAmzTarget48(Enum):
    AWSWAF_Regional_20161128_ListActivatedRulesInRuleGroup = (
        'AWSWAF_Regional_20161128.ListActivatedRulesInRuleGroup'
    )


class XAmzTarget49(Enum):
    AWSWAF_Regional_20161128_ListByteMatchSets = (
        'AWSWAF_Regional_20161128.ListByteMatchSets'
    )


class XAmzTarget50(Enum):
    AWSWAF_Regional_20161128_ListGeoMatchSets = (
        'AWSWAF_Regional_20161128.ListGeoMatchSets'
    )


class XAmzTarget51(Enum):
    AWSWAF_Regional_20161128_ListIPSets = 'AWSWAF_Regional_20161128.ListIPSets'


class XAmzTarget52(Enum):
    AWSWAF_Regional_20161128_ListLoggingConfigurations = (
        'AWSWAF_Regional_20161128.ListLoggingConfigurations'
    )


class XAmzTarget53(Enum):
    AWSWAF_Regional_20161128_ListRateBasedRules = (
        'AWSWAF_Regional_20161128.ListRateBasedRules'
    )


class XAmzTarget54(Enum):
    AWSWAF_Regional_20161128_ListRegexMatchSets = (
        'AWSWAF_Regional_20161128.ListRegexMatchSets'
    )


class XAmzTarget55(Enum):
    AWSWAF_Regional_20161128_ListRegexPatternSets = (
        'AWSWAF_Regional_20161128.ListRegexPatternSets'
    )


class XAmzTarget56(Enum):
    AWSWAF_Regional_20161128_ListResourcesForWebACL = (
        'AWSWAF_Regional_20161128.ListResourcesForWebACL'
    )


class XAmzTarget57(Enum):
    AWSWAF_Regional_20161128_ListRuleGroups = 'AWSWAF_Regional_20161128.ListRuleGroups'


class XAmzTarget58(Enum):
    AWSWAF_Regional_20161128_ListRules = 'AWSWAF_Regional_20161128.ListRules'


class XAmzTarget59(Enum):
    AWSWAF_Regional_20161128_ListSizeConstraintSets = (
        'AWSWAF_Regional_20161128.ListSizeConstraintSets'
    )


class XAmzTarget60(Enum):
    AWSWAF_Regional_20161128_ListSqlInjectionMatchSets = (
        'AWSWAF_Regional_20161128.ListSqlInjectionMatchSets'
    )


class XAmzTarget61(Enum):
    AWSWAF_Regional_20161128_ListSubscribedRuleGroups = (
        'AWSWAF_Regional_20161128.ListSubscribedRuleGroups'
    )


class XAmzTarget62(Enum):
    AWSWAF_Regional_20161128_ListTagsForResource = (
        'AWSWAF_Regional_20161128.ListTagsForResource'
    )


class XAmzTarget63(Enum):
    AWSWAF_Regional_20161128_ListWebACLs = 'AWSWAF_Regional_20161128.ListWebACLs'


class XAmzTarget64(Enum):
    AWSWAF_Regional_20161128_ListXssMatchSets = (
        'AWSWAF_Regional_20161128.ListXssMatchSets'
    )


class XAmzTarget65(Enum):
    AWSWAF_Regional_20161128_PutLoggingConfiguration = (
        'AWSWAF_Regional_20161128.PutLoggingConfiguration'
    )


class XAmzTarget66(Enum):
    AWSWAF_Regional_20161128_PutPermissionPolicy = (
        'AWSWAF_Regional_20161128.PutPermissionPolicy'
    )


class XAmzTarget67(Enum):
    AWSWAF_Regional_20161128_TagResource = 'AWSWAF_Regional_20161128.TagResource'


class XAmzTarget68(Enum):
    AWSWAF_Regional_20161128_UntagResource = 'AWSWAF_Regional_20161128.UntagResource'


class XAmzTarget69(Enum):
    AWSWAF_Regional_20161128_UpdateByteMatchSet = (
        'AWSWAF_Regional_20161128.UpdateByteMatchSet'
    )


class XAmzTarget70(Enum):
    AWSWAF_Regional_20161128_UpdateGeoMatchSet = (
        'AWSWAF_Regional_20161128.UpdateGeoMatchSet'
    )


class XAmzTarget71(Enum):
    AWSWAF_Regional_20161128_UpdateIPSet = 'AWSWAF_Regional_20161128.UpdateIPSet'


class XAmzTarget72(Enum):
    AWSWAF_Regional_20161128_UpdateRateBasedRule = (
        'AWSWAF_Regional_20161128.UpdateRateBasedRule'
    )


class XAmzTarget73(Enum):
    AWSWAF_Regional_20161128_UpdateRegexMatchSet = (
        'AWSWAF_Regional_20161128.UpdateRegexMatchSet'
    )


class XAmzTarget74(Enum):
    AWSWAF_Regional_20161128_UpdateRegexPatternSet = (
        'AWSWAF_Regional_20161128.UpdateRegexPatternSet'
    )


class XAmzTarget75(Enum):
    AWSWAF_Regional_20161128_UpdateRule = 'AWSWAF_Regional_20161128.UpdateRule'


class XAmzTarget76(Enum):
    AWSWAF_Regional_20161128_UpdateRuleGroup = (
        'AWSWAF_Regional_20161128.UpdateRuleGroup'
    )


class XAmzTarget77(Enum):
    AWSWAF_Regional_20161128_UpdateSizeConstraintSet = (
        'AWSWAF_Regional_20161128.UpdateSizeConstraintSet'
    )


class XAmzTarget78(Enum):
    AWSWAF_Regional_20161128_UpdateSqlInjectionMatchSet = (
        'AWSWAF_Regional_20161128.UpdateSqlInjectionMatchSet'
    )


class XAmzTarget79(Enum):
    AWSWAF_Regional_20161128_UpdateWebACL = 'AWSWAF_Regional_20161128.UpdateWebACL'


class XAmzTarget80(Enum):
    AWSWAF_Regional_20161128_UpdateXssMatchSet = (
        'AWSWAF_Regional_20161128.UpdateXssMatchSet'
    )


class AssociateWebACLRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    WebACLId: ResourceId


class ByteMatchSetSummary(BaseModel):
    ByteMatchSetId: ResourceId
    Name: ResourceName


class CreateByteMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateGeoMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateIPSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateRegexMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateRegexPatternSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateRuleGroupResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')


class CreateSizeConstraintSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateSqlInjectionMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class CreateWebACLMigrationStackRequest(BaseModel):
    IgnoreUnsupportedType_1: IgnoreUnsupportedType = Field(
        ..., alias='IgnoreUnsupportedType'
    )
    S3BucketName_1: S3BucketName = Field(..., alias='S3BucketName')
    WebACLId: ResourceId


class CreateWebACLMigrationStackResponse(BaseModel):
    S3ObjectUrl_1: S3ObjectUrl = Field(..., alias='S3ObjectUrl')


class CreateXssMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Name: ResourceName


class DeleteByteMatchSetRequest(BaseModel):
    ByteMatchSetId: ResourceId
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')


class DeleteGeoMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    GeoMatchSetId: ResourceId


class DeleteIPSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    IPSetId: ResourceId


class DeleteLoggingConfigurationRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeletePermissionPolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class DeleteRateBasedRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RuleId: ResourceId


class DeleteRegexMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RegexMatchSetId: ResourceId


class DeleteRegexPatternSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RegexPatternSetId: ResourceId


class DeleteRuleGroupRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RuleGroupId: ResourceId


class DeleteRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RuleId: ResourceId


class DeleteSizeConstraintSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    SizeConstraintSetId: ResourceId


class DeleteSqlInjectionMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    SqlInjectionMatchSetId: ResourceId


class DeleteWebACLRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    WebACLId: ResourceId


class DeleteXssMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    XssMatchSetId: ResourceId


class DisassociateWebACLRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class ExcludedRule(BaseModel):
    RuleId: ResourceId


class ExcludedRules(RootModel[List[ExcludedRule]]):
    root: List[ExcludedRule]


class FieldToMatch(BaseModel):
    Data: Optional[MatchFieldData] = None
    Type: MatchFieldType


class GeoMatchConstraint(BaseModel):
    Type: GeoMatchConstraintType
    Value: GeoMatchConstraintValue


class GeoMatchConstraints(RootModel[List[GeoMatchConstraint]]):
    root: List[GeoMatchConstraint]


class GeoMatchSet(BaseModel):
    GeoMatchConstraints_1: GeoMatchConstraints = Field(..., alias='GeoMatchConstraints')
    GeoMatchSetId: ResourceId
    Name: Optional[ResourceName] = None


class GeoMatchSetSummary(BaseModel):
    GeoMatchSetId: ResourceId
    Name: ResourceName


class GeoMatchSetUpdate(BaseModel):
    Action: ChangeAction
    GeoMatchConstraint_1: GeoMatchConstraint = Field(..., alias='GeoMatchConstraint')


class GeoMatchSetUpdates(RootModel[List[GeoMatchSetUpdate]]):
    root: List[GeoMatchSetUpdate] = Field(..., min_length=1)


class GetByteMatchSetRequest(BaseModel):
    ByteMatchSetId: ResourceId


class GetGeoMatchSetRequest(BaseModel):
    GeoMatchSetId: ResourceId


class GetGeoMatchSetResponse(BaseModel):
    GeoMatchSet_1: Optional[GeoMatchSet] = Field(None, alias='GeoMatchSet')


class GetIPSetRequest(BaseModel):
    IPSetId: ResourceId


class GetLoggingConfigurationRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetPermissionPolicyRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetPermissionPolicyResponse(BaseModel):
    Policy: Optional[PolicyString] = None


class GetRateBasedRuleManagedKeysRequest(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RuleId: ResourceId


class GetRateBasedRuleManagedKeysResponse(BaseModel):
    ManagedKeys_1: Optional[ManagedKeys] = Field(None, alias='ManagedKeys')
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class GetRateBasedRuleRequest(BaseModel):
    RuleId: ResourceId


class GetRegexMatchSetRequest(BaseModel):
    RegexMatchSetId: ResourceId


class GetRegexPatternSetRequest(BaseModel):
    RegexPatternSetId: ResourceId


class GetRuleGroupRequest(BaseModel):
    RuleGroupId: ResourceId


class GetRuleGroupResponse(BaseModel):
    RuleGroup_1: Optional[RuleGroup] = Field(None, alias='RuleGroup')


class GetRuleRequest(BaseModel):
    RuleId: ResourceId


class GetSizeConstraintSetRequest(BaseModel):
    SizeConstraintSetId: ResourceId


class GetSqlInjectionMatchSetRequest(BaseModel):
    SqlInjectionMatchSetId: ResourceId


class GetWebACLForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class GetWebACLForResourceResponse(BaseModel):
    WebACLSummary_1: Optional[WebACLSummary] = Field(None, alias='WebACLSummary')


class GetWebACLRequest(BaseModel):
    WebACLId: ResourceId


class GetXssMatchSetRequest(BaseModel):
    XssMatchSetId: ResourceId


class HTTPHeader(BaseModel):
    Name: Optional[HeaderName] = None
    Value: Optional[HeaderValue] = None


class HTTPHeaders(RootModel[List[HTTPHeader]]):
    root: List[HTTPHeader]


class HTTPRequest(BaseModel):
    ClientIP: Optional[IPString] = None
    Country_1: Optional[Country] = Field(None, alias='Country')
    HTTPVersion_1: Optional[HTTPVersion] = Field(None, alias='HTTPVersion')
    Headers: Optional[HTTPHeaders] = None
    Method: Optional[HTTPMethod] = None
    URI: Optional[URIString] = None


class IPSetDescriptor(BaseModel):
    Type: IPSetDescriptorType
    Value: IPSetDescriptorValue


class IPSetDescriptors(RootModel[List[IPSetDescriptor]]):
    root: List[IPSetDescriptor]


class IPSetSummary(BaseModel):
    IPSetId: ResourceId
    Name: ResourceName


class IPSetUpdate(BaseModel):
    Action: ChangeAction
    IPSetDescriptor_1: IPSetDescriptor = Field(..., alias='IPSetDescriptor')


class IPSetUpdates(RootModel[List[IPSetUpdate]]):
    root: List[IPSetUpdate] = Field(..., min_length=1)


class ListActivatedRulesInRuleGroupRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RuleGroupId: Optional[ResourceId] = None


class ListByteMatchSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListGeoMatchSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListIPSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListLoggingConfigurationsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRateBasedRulesRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRegexMatchSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRegexPatternSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListResourcesForWebACLRequest(BaseModel):
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    WebACLId: ResourceId


class ListResourcesForWebACLResponse(BaseModel):
    ResourceArns_1: Optional[ResourceArns] = Field(None, alias='ResourceArns')


class ListRuleGroupsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRulesRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListSizeConstraintSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListSqlInjectionMatchSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListSubscribedRuleGroupsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListTagsForResourceRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    ResourceARN: ResourceArn


class ListWebACLsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListXssMatchSetsRequest(BaseModel):
    Limit: Optional[PaginationLimit] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class LogDestinationConfigs(RootModel[List[ResourceArn]]):
    root: List[ResourceArn] = Field(..., max_length=1, min_length=1)


class Predicate(BaseModel):
    DataId: ResourceId
    Negated_1: Negated = Field(..., alias='Negated')
    Type: PredicateType


class Predicates(RootModel[List[Predicate]]):
    root: List[Predicate]


class PutPermissionPolicyRequest(BaseModel):
    Policy: PolicyString
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class RateBasedRule(BaseModel):
    MatchPredicates: Predicates
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Name: Optional[ResourceName] = None
    RateKey_1: RateKey = Field(..., alias='RateKey')
    RateLimit_1: RateLimit = Field(..., alias='RateLimit')
    RuleId: ResourceId


class RedactedFields(RootModel[List[FieldToMatch]]):
    root: List[FieldToMatch]


class RegexMatchSetSummary(BaseModel):
    Name: ResourceName
    RegexMatchSetId: ResourceId


class RegexMatchTuple(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    RegexPatternSetId: ResourceId
    TextTransformation_1: TextTransformation = Field(..., alias='TextTransformation')


class RegexMatchTuples(RootModel[List[RegexMatchTuple]]):
    root: List[RegexMatchTuple]


class RegexPatternSet(BaseModel):
    Name: Optional[ResourceName] = None
    RegexPatternSetId: ResourceId
    RegexPatternStrings_1: RegexPatternStrings = Field(..., alias='RegexPatternStrings')


class RegexPatternSetSummary(BaseModel):
    Name: ResourceName
    RegexPatternSetId: ResourceId


class RegexPatternSetUpdate(BaseModel):
    Action: ChangeAction
    RegexPatternString_1: RegexPatternString = Field(..., alias='RegexPatternString')


class RegexPatternSetUpdates(RootModel[List[RegexPatternSetUpdate]]):
    root: List[RegexPatternSetUpdate] = Field(..., min_length=1)


class Rule(BaseModel):
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Name: Optional[ResourceName] = None
    Predicates_1: Predicates = Field(..., alias='Predicates')
    RuleId: ResourceId


class RuleGroupSummaries(RootModel[List[RuleGroupSummary]]):
    root: List[RuleGroupSummary]


class RuleSummaries(RootModel[List[RuleSummary]]):
    root: List[RuleSummary]


class RuleUpdate(BaseModel):
    Action: ChangeAction
    Predicate_1: Predicate = Field(..., alias='Predicate')


class RuleUpdates(RootModel[List[RuleUpdate]]):
    root: List[RuleUpdate]


class SampledHTTPRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    Request: HTTPRequest
    RuleWithinRuleGroup: Optional[ResourceId] = None
    Timestamp_1: Optional[Timestamp] = Field(None, alias='Timestamp')
    Weight: SampleWeight


class SampledHTTPRequests(RootModel[List[SampledHTTPRequest]]):
    root: List[SampledHTTPRequest]


class SizeConstraint(BaseModel):
    ComparisonOperator_1: ComparisonOperator = Field(..., alias='ComparisonOperator')
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    Size_1: Size = Field(..., alias='Size')
    TextTransformation_1: TextTransformation = Field(..., alias='TextTransformation')


class SizeConstraintSetSummaries(RootModel[List[SizeConstraintSetSummary]]):
    root: List[SizeConstraintSetSummary]


class SizeConstraintSetUpdate(BaseModel):
    Action: ChangeAction
    SizeConstraint_1: SizeConstraint = Field(..., alias='SizeConstraint')


class SizeConstraintSetUpdates(RootModel[List[SizeConstraintSetUpdate]]):
    root: List[SizeConstraintSetUpdate] = Field(..., min_length=1)


class SizeConstraints(RootModel[List[SizeConstraint]]):
    root: List[SizeConstraint]


class SqlInjectionMatchSetSummaries(RootModel[List[SqlInjectionMatchSetSummary]]):
    root: List[SqlInjectionMatchSetSummary]


class SqlInjectionMatchTuple(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    TextTransformation_1: TextTransformation = Field(..., alias='TextTransformation')


class SqlInjectionMatchTuples(RootModel[List[SqlInjectionMatchTuple]]):
    root: List[SqlInjectionMatchTuple]


class SubscribedRuleGroupSummaries(RootModel[List[SubscribedRuleGroupSummary]]):
    root: List[SubscribedRuleGroupSummary]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., min_length=1)


class TagResourceRequest(BaseModel):
    ResourceARN: ResourceArn
    Tags: TagList


class TimeWindow(BaseModel):
    EndTime: Timestamp
    StartTime: Timestamp


class UpdateGeoMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    GeoMatchSetId: ResourceId
    Updates: GeoMatchSetUpdates


class UpdateIPSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    IPSetId: ResourceId
    Updates: IPSetUpdates


class UpdateRateBasedRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RateLimit_1: RateLimit = Field(..., alias='RateLimit')
    RuleId: ResourceId
    Updates: RuleUpdates


class UpdateRegexPatternSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RegexPatternSetId: ResourceId
    Updates: RegexPatternSetUpdates


class UpdateRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RuleId: ResourceId
    Updates: RuleUpdates


class UpdateSizeConstraintSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    SizeConstraintSetId: ResourceId
    Updates: SizeConstraintSetUpdates


class WafAction(BaseModel):
    Type: WafActionType


class WafOverrideAction(BaseModel):
    Type: WafOverrideActionType


class WebACLSummaries(RootModel[List[WebACLSummary]]):
    root: List[WebACLSummary]


class XssMatchSetSummaries(RootModel[List[XssMatchSetSummary]]):
    root: List[XssMatchSetSummary]


class XssMatchTuple(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    TextTransformation_1: TextTransformation = Field(..., alias='TextTransformation')


class XssMatchTuples(RootModel[List[XssMatchTuple]]):
    root: List[XssMatchTuple]


class ActivatedRule(BaseModel):
    Action: Optional[WafAction] = None
    ExcludedRules_1: Optional[ExcludedRules] = Field(None, alias='ExcludedRules')
    OverrideAction: Optional[WafOverrideAction] = None
    Priority: RulePriority
    RuleId: ResourceId
    Type: Optional[WafRuleType] = None


class ActivatedRules(RootModel[List[ActivatedRule]]):
    root: List[ActivatedRule]


class ByteMatchSetSummaries(RootModel[List[ByteMatchSetSummary]]):
    root: List[ByteMatchSetSummary]


class ByteMatchTuple(BaseModel):
    FieldToMatch_1: FieldToMatch = Field(..., alias='FieldToMatch')
    PositionalConstraint_1: PositionalConstraint = Field(
        ..., alias='PositionalConstraint'
    )
    TargetString: ByteMatchTargetString
    TextTransformation_1: TextTransformation = Field(..., alias='TextTransformation')


class ByteMatchTuples(RootModel[List[ByteMatchTuple]]):
    root: List[ByteMatchTuple]


class CreateGeoMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    GeoMatchSet_1: Optional[GeoMatchSet] = Field(None, alias='GeoMatchSet')


class CreateRateBasedRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: ResourceName
    RateKey_1: RateKey = Field(..., alias='RateKey')
    RateLimit_1: RateLimit = Field(..., alias='RateLimit')
    Tags: Optional[TagList] = None


class CreateRateBasedRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    Rule: Optional[RateBasedRule] = None


class CreateRegexPatternSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    RegexPatternSet_1: Optional[RegexPatternSet] = Field(None, alias='RegexPatternSet')


class CreateRuleGroupRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: ResourceName
    Tags: Optional[TagList] = None


class CreateRuleRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: ResourceName
    Tags: Optional[TagList] = None


class CreateRuleResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    Rule_1: Optional[Rule] = Field(None, alias='Rule')


class CreateWebACLRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    DefaultAction: WafAction
    MetricName_1: MetricName = Field(..., alias='MetricName')
    Name: ResourceName
    Tags: Optional[TagList] = None


class GeoMatchSetSummaries(RootModel[List[GeoMatchSetSummary]]):
    root: List[GeoMatchSetSummary]


class GetRateBasedRuleResponse(BaseModel):
    Rule: Optional[RateBasedRule] = None


class GetRegexPatternSetResponse(BaseModel):
    RegexPatternSet_1: Optional[RegexPatternSet] = Field(None, alias='RegexPatternSet')


class GetRuleResponse(BaseModel):
    Rule_1: Optional[Rule] = Field(None, alias='Rule')


class GetSampledRequestsRequest(BaseModel):
    MaxItems: GetSampledRequestsMaxItems
    RuleId: ResourceId
    TimeWindow_1: TimeWindow = Field(..., alias='TimeWindow')
    WebAclId: ResourceId


class GetSampledRequestsResponse(BaseModel):
    PopulationSize_1: Optional[PopulationSize] = Field(None, alias='PopulationSize')
    SampledRequests: Optional[SampledHTTPRequests] = None
    TimeWindow_1: Optional[TimeWindow] = Field(None, alias='TimeWindow')


class IPSet(BaseModel):
    IPSetDescriptors_1: IPSetDescriptors = Field(..., alias='IPSetDescriptors')
    IPSetId: ResourceId
    Name: Optional[ResourceName] = None


class IPSetSummaries(RootModel[List[IPSetSummary]]):
    root: List[IPSetSummary]


class ListActivatedRulesInRuleGroupResponse(BaseModel):
    ActivatedRules_1: Optional[ActivatedRules] = Field(None, alias='ActivatedRules')
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListByteMatchSetsResponse(BaseModel):
    ByteMatchSets: Optional[ByteMatchSetSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListGeoMatchSetsResponse(BaseModel):
    GeoMatchSets: Optional[GeoMatchSetSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListIPSetsResponse(BaseModel):
    IPSets: Optional[IPSetSummaries] = None
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRateBasedRulesResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Rules: Optional[RuleSummaries] = None


class ListRuleGroupsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RuleGroups: Optional[RuleGroupSummaries] = None


class ListRulesResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    Rules: Optional[RuleSummaries] = None


class ListSizeConstraintSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    SizeConstraintSets: Optional[SizeConstraintSetSummaries] = None


class ListSqlInjectionMatchSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    SqlInjectionMatchSets: Optional[SqlInjectionMatchSetSummaries] = None


class ListSubscribedRuleGroupsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RuleGroups: Optional[SubscribedRuleGroupSummaries] = None


class ListWebACLsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    WebACLs: Optional[WebACLSummaries] = None


class ListXssMatchSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    XssMatchSets: Optional[XssMatchSetSummaries] = None


class LoggingConfiguration(BaseModel):
    LogDestinationConfigs_1: LogDestinationConfigs = Field(
        ..., alias='LogDestinationConfigs'
    )
    RedactedFields_1: Optional[RedactedFields] = Field(None, alias='RedactedFields')
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class LoggingConfigurations(RootModel[List[LoggingConfiguration]]):
    root: List[LoggingConfiguration]


class PutLoggingConfigurationRequest(BaseModel):
    LoggingConfiguration_1: LoggingConfiguration = Field(
        ..., alias='LoggingConfiguration'
    )


class PutLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class RegexMatchSet(BaseModel):
    Name: Optional[ResourceName] = None
    RegexMatchSetId: Optional[ResourceId] = None
    RegexMatchTuples_1: Optional[RegexMatchTuples] = Field(
        None, alias='RegexMatchTuples'
    )


class RegexMatchSetSummaries(RootModel[List[RegexMatchSetSummary]]):
    root: List[RegexMatchSetSummary]


class RegexMatchSetUpdate(BaseModel):
    Action: ChangeAction
    RegexMatchTuple_1: RegexMatchTuple = Field(..., alias='RegexMatchTuple')


class RegexMatchSetUpdates(RootModel[List[RegexMatchSetUpdate]]):
    root: List[RegexMatchSetUpdate] = Field(..., min_length=1)


class RegexPatternSetSummaries(RootModel[List[RegexPatternSetSummary]]):
    root: List[RegexPatternSetSummary]


class RuleGroupUpdate(BaseModel):
    Action: ChangeAction
    ActivatedRule_1: ActivatedRule = Field(..., alias='ActivatedRule')


class RuleGroupUpdates(RootModel[List[RuleGroupUpdate]]):
    root: List[RuleGroupUpdate] = Field(..., min_length=1)


class SizeConstraintSet(BaseModel):
    Name: Optional[ResourceName] = None
    SizeConstraintSetId: ResourceId
    SizeConstraints_1: SizeConstraints = Field(..., alias='SizeConstraints')


class SqlInjectionMatchSet(BaseModel):
    Name: Optional[ResourceName] = None
    SqlInjectionMatchSetId: ResourceId
    SqlInjectionMatchTuples_1: SqlInjectionMatchTuples = Field(
        ..., alias='SqlInjectionMatchTuples'
    )


class SqlInjectionMatchSetUpdate(BaseModel):
    Action: ChangeAction
    SqlInjectionMatchTuple_1: SqlInjectionMatchTuple = Field(
        ..., alias='SqlInjectionMatchTuple'
    )


class SqlInjectionMatchSetUpdates(RootModel[List[SqlInjectionMatchSetUpdate]]):
    root: List[SqlInjectionMatchSetUpdate] = Field(..., min_length=1)


class TagInfoForResource(BaseModel):
    ResourceARN: Optional[ResourceArn] = None
    TagList_1: Optional[TagList] = Field(None, alias='TagList')


class UpdateRegexMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RegexMatchSetId: ResourceId
    Updates: RegexMatchSetUpdates


class UpdateRuleGroupRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    RuleGroupId: ResourceId
    Updates: RuleGroupUpdates


class UpdateSqlInjectionMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    SqlInjectionMatchSetId: ResourceId
    Updates: SqlInjectionMatchSetUpdates


class WebACL(BaseModel):
    DefaultAction: WafAction
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    Name: Optional[ResourceName] = None
    Rules: ActivatedRules
    WebACLArn: Optional[ResourceArn] = None
    WebACLId: ResourceId


class WebACLUpdate(BaseModel):
    Action: ChangeAction
    ActivatedRule_1: ActivatedRule = Field(..., alias='ActivatedRule')


class WebACLUpdates(RootModel[List[WebACLUpdate]]):
    root: List[WebACLUpdate]


class XssMatchSet(BaseModel):
    Name: Optional[ResourceName] = None
    XssMatchSetId: ResourceId
    XssMatchTuples_1: XssMatchTuples = Field(..., alias='XssMatchTuples')


class XssMatchSetUpdate(BaseModel):
    Action: ChangeAction
    XssMatchTuple_1: XssMatchTuple = Field(..., alias='XssMatchTuple')


class XssMatchSetUpdates(RootModel[List[XssMatchSetUpdate]]):
    root: List[XssMatchSetUpdate] = Field(..., min_length=1)


class ByteMatchSet(BaseModel):
    ByteMatchSetId: ResourceId
    ByteMatchTuples_1: ByteMatchTuples = Field(..., alias='ByteMatchTuples')
    Name: Optional[ResourceName] = None


class ByteMatchSetUpdate(BaseModel):
    Action: ChangeAction
    ByteMatchTuple_1: ByteMatchTuple = Field(..., alias='ByteMatchTuple')


class ByteMatchSetUpdates(RootModel[List[ByteMatchSetUpdate]]):
    root: List[ByteMatchSetUpdate] = Field(..., min_length=1)


class CreateByteMatchSetResponse(BaseModel):
    ByteMatchSet_1: Optional[ByteMatchSet] = Field(None, alias='ByteMatchSet')
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')


class CreateIPSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    IPSet_1: Optional[IPSet] = Field(None, alias='IPSet')


class CreateRegexMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    RegexMatchSet_1: Optional[RegexMatchSet] = Field(None, alias='RegexMatchSet')


class CreateSizeConstraintSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    SizeConstraintSet_1: Optional[SizeConstraintSet] = Field(
        None, alias='SizeConstraintSet'
    )


class CreateSqlInjectionMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    SqlInjectionMatchSet_1: Optional[SqlInjectionMatchSet] = Field(
        None, alias='SqlInjectionMatchSet'
    )


class CreateWebACLResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    WebACL_1: Optional[WebACL] = Field(None, alias='WebACL')


class CreateXssMatchSetResponse(BaseModel):
    ChangeToken_1: Optional[ChangeToken] = Field(None, alias='ChangeToken')
    XssMatchSet_1: Optional[XssMatchSet] = Field(None, alias='XssMatchSet')


class GetByteMatchSetResponse(BaseModel):
    ByteMatchSet_1: Optional[ByteMatchSet] = Field(None, alias='ByteMatchSet')


class GetIPSetResponse(BaseModel):
    IPSet_1: Optional[IPSet] = Field(None, alias='IPSet')


class GetLoggingConfigurationResponse(BaseModel):
    LoggingConfiguration_1: Optional[LoggingConfiguration] = Field(
        None, alias='LoggingConfiguration'
    )


class GetRegexMatchSetResponse(BaseModel):
    RegexMatchSet_1: Optional[RegexMatchSet] = Field(None, alias='RegexMatchSet')


class GetSizeConstraintSetResponse(BaseModel):
    SizeConstraintSet_1: Optional[SizeConstraintSet] = Field(
        None, alias='SizeConstraintSet'
    )


class GetSqlInjectionMatchSetResponse(BaseModel):
    SqlInjectionMatchSet_1: Optional[SqlInjectionMatchSet] = Field(
        None, alias='SqlInjectionMatchSet'
    )


class GetWebACLResponse(BaseModel):
    WebACL_1: Optional[WebACL] = Field(None, alias='WebACL')


class GetXssMatchSetResponse(BaseModel):
    XssMatchSet_1: Optional[XssMatchSet] = Field(None, alias='XssMatchSet')


class ListLoggingConfigurationsResponse(BaseModel):
    LoggingConfigurations_1: Optional[LoggingConfigurations] = Field(
        None, alias='LoggingConfigurations'
    )
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')


class ListRegexMatchSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RegexMatchSets: Optional[RegexMatchSetSummaries] = None


class ListRegexPatternSetsResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    RegexPatternSets: Optional[RegexPatternSetSummaries] = None


class ListTagsForResourceResponse(BaseModel):
    NextMarker_1: Optional[NextMarker] = Field(None, alias='NextMarker')
    TagInfoForResource_1: Optional[TagInfoForResource] = Field(
        None, alias='TagInfoForResource'
    )


class UpdateByteMatchSetRequest(BaseModel):
    ByteMatchSetId: ResourceId
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Updates: ByteMatchSetUpdates


class UpdateWebACLRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    DefaultAction: Optional[WafAction] = None
    Updates: Optional[WebACLUpdates] = None
    WebACLId: ResourceId


class UpdateXssMatchSetRequest(BaseModel):
    ChangeToken_1: ChangeToken = Field(..., alias='ChangeToken')
    Updates: XssMatchSetUpdates
    XssMatchSetId: ResourceId
